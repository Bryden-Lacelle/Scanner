Name: Bryden Lacelle
Student Number: 040754048

Written Functions: st_install(), st_update_type(), st_update_value(), st_get_type(), st_destroy(), ex()
For this assignment I implemented the above functions for the symbol table and one helping function for formating the
number of spaces in the st_print function. In addition I made changes to Scanner to resolve issues based on the feedback
from the previous assignment as well as making ajustments to the VID accepting functions in the Scanner.
I was responsible for debugging all functions and code outlined above.



Name: Justin Farinaccio
Student Number: 040775821

I created the modified version of the transition table and transition diagram, and wrote and tested the code for the following functions:
(part of) mlwpar_next_token(); char_class(); aa_func02(); aa_func03(); aa_func08(); aa_func05(); aa_func10(); atool(); iskeyword().

In mlwpar_next_token(), I processed many of the singel-lexeme tokens.  I implemented the accepting functions for arithmetic variable identifiers and keywords, string variable identifiers, floating point literals, decimal integer literals and 0, and octals.  In addition, I implemented the conversion of strings representing an octal integer constant to an integer, as well as determining whether a lexeme is a valid keyword.

I debugged the cases where there were failures of processing the various single-lexeme tokens, as well as each of the accepting functions, changing the parameters of each - in addition to the transition table - as errors arose.

I implemented the code for the finite state machine, and also completed the table.h header file.
